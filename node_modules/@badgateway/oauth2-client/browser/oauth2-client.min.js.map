{"version":3,"file":"oauth2-client.min.js","mappings":"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","sources":["webpack://OAuth2Client/webpack/universalModuleDefinition","webpack://OAuth2Client/./src/client.ts","webpack://OAuth2Client/./src/client/authorization-code.ts","webpack://OAuth2Client/./src/error.ts","webpack://OAuth2Client/./src/fetch-wrapper.ts","webpack://OAuth2Client/webpack/bootstrap","webpack://OAuth2Client/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"OAuth2Client\"] = factory();\n\telse\n\t\troot[\"OAuth2Client\"] = factory();\n})(self, () => {\nreturn ","import { OAuth2Token } from './token';\nimport {\n  AuthorizationCodeRequest,\n  ClientCredentialsRequest,\n  IntrospectionRequest,\n  IntrospectionResponse,\n  PasswordRequest,\n  RefreshRequest,\n  ServerMetadataResponse,\n  TokenResponse,\n} from './messages';\nimport { OAuth2Error } from './error';\nimport { OAuth2AuthorizationCodeClient } from './client/authorization-code';\n\nexport interface ClientSettings {\n\n  /**\n   * The hostname of the OAuth2 server.\n   * If provided, we'll attempt to discover all the other related endpoints.\n   *\n   * If this is not desired, just specifiy the other endpoints manually.\n   *\n   * This url will also be used as the base URL for all other urls. This lets\n   * you specify all the other urls as relative.\n   */\n  server?: string;\n\n  /**\n   * OAuth2 clientId\n   */\n  clientId: string;\n\n  /**\n   * OAuth2 clientSecret\n   *\n   * This is required for the client_credentials and password flows, but\n   * not authorization_code or implicit.\n   */\n  clientSecret?: string;\n\n  /**\n   * The /authorize endpoint.\n   *\n   * Required only for the browser-portion of the authorization_code flow.\n   */\n  authorizationEndpoint?: string;\n\n  /**\n   * The token endpoint.\n   *\n   * Required for most grant types and refreshing tokens.\n   */\n  tokenEndpoint?: string;\n\n  /**\n   * Introspection endpoint.\n   *\n   * Required for, well, introspecting tokens.\n   * If not provided we'll try to discover it, or othwerwise default to /introspect\n   */\n  introspectionEndpoint?: string;\n\n  /**\n   * OAuth 2.0 Authorization Server Metadata endpoint or OpenID\n   * Connect Discovery 1.0 endpoint.\n   *\n   * If this endpoint is provided it can be used to automatically figure\n   * out all the other endpoints.\n   *\n   * Usually the URL for this is: https://server/.well-known/oauth-authorization-server\n   */\n  discoveryEndpoint?: string;\n\n}\n\n\ntype OAuth2Endpoint = 'tokenEndpoint' | 'authorizationEndpoint' | 'discoveryEndpoint' | 'introspectionEndpoint';\n\nexport class OAuth2Client {\n\n  settings: ClientSettings;\n\n  constructor(clientSettings: ClientSettings) {\n\n    this.settings = clientSettings;\n\n  }\n\n  /**\n   * Refreshes an existing token, and returns a new one.\n   */\n  async refreshToken(token: OAuth2Token): Promise<OAuth2Token> {\n\n    if (!token.refreshToken) {\n      throw new Error('This token didn\\'t have a refreshToken. It\\'s not possible to refresh this');\n    }\n\n    const body:RefreshRequest = {\n      grant_type: 'refresh_token',\n      refresh_token: token.refreshToken,\n    };\n    if (!this.settings.clientSecret) {\n      // If there's no secret, send the clientId in the body.\n      body.client_id = this.settings.clientId;\n    }\n\n    return tokenResponseToOAuth2Token(this.request('tokenEndpoint', body));\n\n  }\n\n  /**\n   * Retrieves an OAuth2 token using the client_credentials grant.\n   */\n  async clientCredentials(params?: {scope?: string[]}): Promise<OAuth2Token> {\n\n    const body:ClientCredentialsRequest = {\n      grant_type: 'client_credentials',\n      scope: params?.scope?.join(' '),\n    };\n    if (!this.settings.clientSecret) {\n      throw new Error('A clientSecret must be provided to use client_credentials');\n    }\n\n    return tokenResponseToOAuth2Token(this.request('tokenEndpoint', body));\n\n  }\n\n  /**\n   * Retrieves an OAuth2 token using the 'password' grant'.\n   */\n  async password(params: {username: string; password: string; scope?: string[]}): Promise<OAuth2Token> {\n\n    const body:PasswordRequest = {\n      grant_type: 'password',\n      ...params,\n      scope: params.scope?.join(' '),\n    };\n    if (!this.settings.clientSecret) {\n      throw new Error('A clientSecret must be provided to use client_credentials');\n    }\n    return tokenResponseToOAuth2Token(this.request('tokenEndpoint', body));\n\n  }\n\n  /**\n   * Returns the helper object for the `authorization_code` grant.\n   *\n   */\n  get authorizationCode(): OAuth2AuthorizationCodeClient {\n\n    return new OAuth2AuthorizationCodeClient(\n      this,\n    );\n\n  }\n\n  /**\n   * Introspect a token\n   *\n   * This will give information about the validity, owner, which client\n   * created the token and more.\n   *\n   * @see https://datatracker.ietf.org/doc/html/rfc7662\n   */\n  async introspect(token: OAuth2Token): Promise<IntrospectionResponse> {\n\n    const body: IntrospectionRequest = {\n      token: token.accessToken,\n      token_type_hint: 'access_token',\n    };\n    return this.request('introspectionEndpoint', body);\n\n  }\n\n  /**\n   * Returns a url for an OAuth2 endpoint.\n   *\n   * Potentially fetches a discovery document to get it.\n   */\n  async getEndpoint(endpoint: OAuth2Endpoint): Promise<string> {\n\n    if (this.settings[endpoint] !== undefined) {\n      return resolve(this.settings[endpoint] as string, this.settings.server);\n    }\n\n    if (endpoint !== 'discoveryEndpoint') {\n      // This condition prevents infinite loops.\n      await this.discover();\n      if (this.settings[endpoint] !== undefined) {\n        return resolve(this.settings[endpoint] as string, this.settings.server);\n      }\n    }\n\n    // If we got here it means we need to 'guess' the endpoint.\n    if (!this.settings.server) {\n      throw new Error(`Could not determine the location of ${endpoint}. Either specify ${endpoint} in the settings, or the \"server\" endpoint to let the client discover it.`);\n    }\n\n    switch(endpoint) {\n      case 'authorizationEndpoint':\n        return resolve('/authorize', this.settings.server);\n      case 'tokenEndpoint' :\n        return resolve('/token', this.settings.server);\n      case 'discoveryEndpoint':\n        return resolve('/.well-known/oauth-authorization-server', this.settings.server);\n      case 'introspectionEndpoint' :\n        return resolve('/introspect', this.settings.server);\n    }\n\n  }\n\n  private discoveryDone = false;\n  private serverMetadata: ServerMetadataResponse | null = null;\n\n\n  /**\n   * Fetches the OAuth2 discovery document\n   */\n  private async discover(): Promise<void> {\n\n    // Never discover twice\n    if (this.discoveryDone) return;\n    this.discoveryDone = true;\n\n    let discoverUrl;\n    try {\n      discoverUrl = await this.getEndpoint('discoveryEndpoint');\n    } catch (err) {\n      console.warn('[oauth2] OAuth2 discovery endpoint could not be determined. Either specify the \"server\" or \"discoveryEndpoint');\n      return;\n    }\n    const resp = await fetch(discoverUrl, { headers: { Accept: 'application/json' }});\n    if (!resp.ok) return;\n    if (!resp.headers.get('Content-Type')?.startsWith('application/json')) {\n      console.warn('[oauth2] OAuth2 discovery endpoint was not a JSON response. Response is ignored');\n      return;\n    }\n    this.serverMetadata = await resp.json();\n\n    const urlMap = [\n      ['authorization_endpoint', 'authorizationEndpoint'],\n      ['token_endpoint', 'tokenEndpoint'],\n      ['introspection_endpoint', 'introspectionEndpoint'],\n    ] as const;\n\n    if (this.serverMetadata===null) return;\n\n    for(const [property, setting] of urlMap) {\n      if (!this.serverMetadata[property]) continue;\n      this.settings[setting] = resolve(this.serverMetadata[property]!, discoverUrl);\n    }\n\n  }\n\n  /**\n   * Does a HTTP request on the 'token' endpoint.\n   */\n  async request(endpoint: 'tokenEndpoint', body: RefreshRequest | ClientCredentialsRequest | PasswordRequest | AuthorizationCodeRequest): Promise<TokenResponse>;\n  async request(endpoint: 'introspectionEndpoint', body: IntrospectionRequest): Promise<IntrospectionResponse>;\n  async request(endpoint: OAuth2Endpoint, body: Record<string, any>): Promise<unknown> {\n\n    const uri = await this.getEndpoint(endpoint);\n\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    };\n\n    if (this.settings.clientSecret) {\n      const basicAuthStr = btoa(this.settings.clientId + ':' + this.settings.clientSecret);\n      headers.Authorization = 'Basic ' + basicAuthStr;\n    } else if (body.grant_type === 'authorization_code') {\n      body.client_id = this.settings.clientId;\n    }\n\n    const resp = await fetch(uri, {\n      method: 'POST',\n      body: generateQueryString(body),\n      headers,\n    });\n\n    if (resp.ok) {\n      return await resp.json();\n    }\n\n    let jsonError;\n    let errorMessage;\n    let oauth2Code;\n    if (resp.headers.has('Content-Type') && resp.headers.get('Content-Type')!.startsWith('application/json')) {\n      jsonError = await resp.json();\n    }\n\n    if (jsonError?.error) {\n      // This is likely an OAUth2-formatted error\n      errorMessage = 'OAuth2 error ' + jsonError.error + '.';\n      if (jsonError.error_description) {\n        errorMessage += ' ' + jsonError.error_description;\n      }\n      oauth2Code = jsonError.error;\n\n    } else {\n      errorMessage = 'HTTP Error ' + resp.status + ' ' + resp.statusText;\n      if (resp.status === 401 && this.settings.clientSecret) {\n        errorMessage += '. It\\'s likely that the clientId and/or clientSecret was incorrect';\n      }\n      oauth2Code = null;\n    }\n    throw new OAuth2Error(errorMessage, oauth2Code, resp.status);\n  }\n\n}\n\nfunction resolve(uri: string, base?:string): string {\n\n  return new URL(uri, base).toString();\n\n}\n\nexport function tokenResponseToOAuth2Token(resp: Promise<TokenResponse>): Promise<OAuth2Token> {\n\n  return resp.then( body => ({\n    accessToken: body.access_token,\n    expiresAt: body.expires_in ? Date.now() + (body.expires_in * 1000) : null,\n    refreshToken: body.refresh_token ?? null,\n  }));\n\n}\n\n/**\n * Generates a query string.\n *\n * This function filters out any undefined values.\n */\nexport function generateQueryString(params: Record<string, undefined|number|string>): string {\n\n  return new URLSearchParams(\n    Object.fromEntries(\n      Object.entries(params).filter( ([k, v]) => v!==undefined)\n    ) as Record<string, string>\n  ).toString();\n\n}\n","import { OAuth2Client, tokenResponseToOAuth2Token, generateQueryString } from '../client';\nimport { OAuth2Token } from '../token';\nimport { AuthorizationCodeRequest, AuthorizationQueryParams } from '../messages';\nimport { OAuth2Error } from '../error';\n\ntype GetAuthorizeUrlParams = {\n  /**\n   * Where to redirect the user back to after authentication.\n   */\n  redirectUri: string;\n\n  /**\n   * The 'state' is a string that can be sent to the authentication server,\n   * and back to the redirectUri.\n   */\n  state?: string;\n\n  /**\n   * Code verifier for PKCE support. If you used this in the redirect\n   * to the authorization endpoint, you also need to use this again\n   * when getting the access_token on the token endpoint.\n   */\n  codeVerifier?: string;\n\n  /**\n   * List of scopes.\n   */\n  scope?: string[];\n}\n\ntype ValidateResponseResult = {\n\n  /**\n   * The authorization code. This code should be used to obtain an access token.\n   */\n  code: string;\n\n  /**\n   * List of scopes that the client requested.\n   */\n  scope?: string[];\n\n}\n\nexport class OAuth2AuthorizationCodeClient {\n\n  client: OAuth2Client;\n\n  constructor(client: OAuth2Client) {\n\n    this.client = client;\n\n  }\n\n  /**\n   * Returns the URi that the user should open in a browser to initiate the\n   * authorization_code flow.\n   */\n  async getAuthorizeUri(params: GetAuthorizeUrlParams): Promise<string> {\n\n    const [\n      codeChallenge,\n      authorizationEndpoint\n    ] = await Promise.all([\n      params.codeVerifier ? getCodeChallenge(params.codeVerifier) : undefined,\n      this.client.getEndpoint('authorizationEndpoint')\n    ]);\n\n    const query: AuthorizationQueryParams = {\n      client_id: this.client.settings.clientId,\n      response_type: 'code',\n      redirect_uri: params.redirectUri,\n      code_challenge_method: codeChallenge?.[0],\n      code_challenge: codeChallenge?.[1],\n    };\n    if (params.state) {\n      query.state = params.state;\n    }\n    if (params.scope) {\n      query.scope = params.scope.join(' ');\n    }\n\n    return authorizationEndpoint + '?' + generateQueryString(query);\n\n  }\n\n  async getTokenFromCodeRedirect(url: string|URL, params: {redirectUri: string; state?: string; codeVerifier?:string} ): Promise<OAuth2Token> {\n\n    const { code } = await this.validateResponse(url, {\n      state: params.state\n    });\n\n    return this.getToken({\n      code,\n      redirectUri: params.redirectUri,\n      codeVerifier: params.codeVerifier,\n    });\n\n  }\n\n  /**\n   * After the user redirected back from the authorization endpoint, the\n   * url will contain a 'code' and other information.\n   *\n   * This function takes the url and validate the response. If the user\n   * redirected back with an error, an error will be thrown.\n   */\n  async validateResponse(url: string|URL, params: {state?: string}): Promise<ValidateResponseResult> {\n\n    const queryParams = new URL(url).searchParams;\n\n    if (queryParams.has('error')) {\n      throw new OAuth2Error(\n        queryParams.get('error_description') ?? 'OAuth2 error',\n        queryParams.get('error')!,\n        0,\n      );\n    }\n\n    if (!queryParams.has('code')) throw new Error(`The url did not contain a code parameter ${url}`);\n    if (!queryParams.has('state')) throw new Error(`The url did not contain state parameter ${url}`);\n\n    if (params.state && params.state !== queryParams.get('state')) {\n      throw new Error(`The \"state\" parameter in the url did not match the expected value of ${params.state}`);\n    }\n\n    return {\n      code: queryParams.get('code')!,\n      scope: queryParams.has('scope') ? queryParams.get('scope')!.split(' ') : undefined,\n    };\n\n  }\n\n\n  /**\n   * Receives an OAuth2 token using 'authorization_code' grant\n   */\n  async getToken(params: { code: string; redirectUri: string; codeVerifier?: string }): Promise<OAuth2Token> {\n\n    const body:AuthorizationCodeRequest = {\n      grant_type: 'authorization_code',\n      code: params.code,\n      redirect_uri: params.redirectUri,\n      code_verifier: params.codeVerifier,\n    };\n    return tokenResponseToOAuth2Token(this.client.request('tokenEndpoint', body));\n\n  }\n\n\n}\n\nexport async function generateCodeVerifier(): Promise<string> {\n\n  const webCrypto = getWebCrypto();\n  if (webCrypto) {\n    const arr = new Uint8Array(32);\n    webCrypto.getRandomValues(arr);\n    return base64Url(arr);\n  } else {\n\n    // Old node doesn't have 'webcrypto', so this is a fallback\n\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const nodeCrypto = require('crypto');\n    return new Promise<string>((res, rej) => {\n      nodeCrypto.randomBytes(32, (err:Error, buf: Buffer) => {\n        if (err) rej(err);\n        res(buf.toString('base64url'));\n      });\n    });\n\n  }\n\n}\n\nexport async function getCodeChallenge(codeVerifier: string): Promise<['plain' | 'S256', string]> {\n\n  const webCrypto = getWebCrypto();\n  if (webCrypto?.subtle) {\n    return ['S256', base64Url(await webCrypto.subtle.digest('SHA-256', stringToBuffer(codeVerifier)))];\n  } else {\n    // Node 14.x fallback\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const nodeCrypto = require('crypto');\n    const hash = nodeCrypto.createHash('sha256');\n    hash.update(stringToBuffer(codeVerifier));\n    return ['S256', hash.digest('base64url')];\n  }\n\n}\n\nfunction getWebCrypto() {\n\n  // Browsers\n  if ((typeof window !== 'undefined' && window.crypto)) {\n    return window.crypto;\n  }\n  // Web workers possibly\n  if ((typeof self !== 'undefined' && self.crypto)) {\n    return self.crypto;\n  }\n  // Node\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const crypto = require('crypto');\n  if (crypto.webcrypto) {\n    return crypto.webcrypto;\n  }\n  return null;\n\n}\n\nfunction stringToBuffer(input: string): ArrayBuffer {\n\n  const buf = new Uint8Array(input.length);\n  for(let i=0; i<input.length;i++) {\n    buf[i] = input.charCodeAt(i) & 0xFF;\n  }\n  return buf;\n\n}\n\nfunction base64Url(buf: ArrayBuffer) {\n  return (\n    btoa(String.fromCharCode(...new Uint8Array(buf)))\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_')\n      .replace(/=+$/, '')\n  );\n}\n\n","/**\n * An error class for any error the server emits.\n *\n * The 'code' property will have the oauth2 error type,\n * such as:\n * - invalid_request\n * - invalid_client\n * - invalid_grant\n * - unauthorized_client\n * - unsupported_grant_type\n * - invalid_scope\n */\nexport class OAuth2Error extends Error {\n\n  oauth2Code: string;\n  httpCode: number;\n\n  constructor(message: string, oauth2Code: string, httpCode: number) {\n\n    super(message);\n\n    this.oauth2Code = oauth2Code;\n    this.httpCode = httpCode;\n\n  }\n\n}\n","import { OAuth2Token } from './token';\nimport { OAuth2Client } from './client';\n\ntype FetchMiddleware = (request: Request, next: (request: Request) => Promise<Response>) => Promise<Response>;\n\ntype OAuth2FetchOptions = {\n\n  /**\n   * Reference to OAuth2 client.\n   */\n  client: OAuth2Client;\n\n  /**\n   * You are responsible for implementing this function.\n   * it's purpose is to supply the 'intitial' oauth2 token.\n   *\n   * This function may be async. Return `null` to fail the process.\n   */\n  getNewToken(): OAuth2Token | null | Promise<OAuth2Token | null>;\n\n  /**\n   * If set, will be called if authenticatin fatally failed.\n   */\n  onError?: (err: Error) => void;\n\n  /**\n   * This function is called whenever the active token changes. Using this is\n   * optional, but it may be used to (for example) put the token in off-line\n   * storage for later usage.\n   */\n  storeToken?: (token: OAuth2Token) => void;\n\n  /**\n   * Also an optional feature. Implement this if you want the wrapper to try a\n   * stored token before attempting a full reauthentication.\n   *\n   * This function may be async. Return null if there was no token.\n   */\n  getStoredToken?: () => OAuth2Token | null | Promise<OAuth2Token | null>;\n\n}\n\n\n\nexport class OAuth2Fetch {\n\n\n  private options: OAuth2FetchOptions;\n\n  /**\n   * Current active token (if any)\n   */\n  private token: OAuth2Token | null = null;\n\n  constructor(options: OAuth2FetchOptions) {\n\n    this.options = options;\n    if (options.getStoredToken) {\n      (async () => {\n        this.token = await options.getStoredToken!();\n      })();\n    }\n    this.scheduleRefresh();\n\n  }\n\n  /**\n   * Does a fetch request and adds a Bearer / access token.\n   *\n   * If the access token is not known, this function attempts to fetch it\n   * first. If the access token is almost expiring, this function might attempt\n   1G* to refresh it.\n   */\n  async fetch(input: RequestInfo, init?: RequestInit): Promise<Response> {\n\n    // input might be a string or a Request object, we want to make sure this\n    // is always a fully-formed Request object.\n    const request = new Request(input, init);\n\n    return this.mw()(\n      request,\n      req => fetch(req)\n    );\n\n  }\n\n  /**\n   * This function allows the fetch-mw to be called as more traditional\n   * middleware.\n   *\n   * This function returns a middleware function with the signature\n   *    (request, next): Response\n   */\n  mw(): FetchMiddleware {\n\n    return async (request, next) => {\n      const accessToken = await this.getAccessToken();\n\n      // Make a clone. We need to clone if we need to retry the request later.\n      let authenticatedRequest = request.clone();\n      authenticatedRequest.headers.set('Authorization', 'Bearer '  + accessToken);\n      let response = await next(authenticatedRequest);\n\n      if (!response.ok && response.status === 401) {\n\n        const newToken = await this.refreshToken();\n\n        authenticatedRequest = request.clone();\n        authenticatedRequest.headers.set('Authorization', 'Bearer '  + newToken.accessToken);\n        response = await next(authenticatedRequest);\n\n      }\n      return response;\n    };\n\n  }\n\n  /**\n   * Returns current token information.\n   *\n   * There result object will have:\n   *   * accessToken\n   *   * expiresAt - when the token expires, or null.\n   *   * refreshToken - may be null\n   *\n   * This function will attempt to automatically refresh if stale.\n   */\n  async getToken(): Promise<OAuth2Token> {\n\n    if (this.token && (this.token.expiresAt === null || this.token.expiresAt > Date.now())) {\n\n      // The current token is still valid\n      return this.token;\n\n    }\n\n    return this.refreshToken();\n\n  }\n\n  /**\n   * Returns an access token.\n   *\n   * If the current access token is not known, it will attempt to fetch it.\n   * If the access token is expiring, it will attempt to refresh it.\n   */\n  async getAccessToken(): Promise<string> {\n\n    const token = await this.getToken();\n    return token.accessToken;\n\n  }\n\n  /**\n   * Keeping track of an active refreshToken operation.\n   *\n   * This will allow us to ensure only 1 such operation happens at any\n   * given time.\n   */\n  private activeRefresh: Promise<OAuth2Token> | null = null;\n\n\n  /**\n   * Forces an access token refresh\n   */\n  async refreshToken(): Promise<OAuth2Token> {\n\n    if (this.activeRefresh) {\n      // If we are currently already doing this operation,\n      // make sure we don't do it twice in parallel.\n      return this.activeRefresh;\n    }\n\n    const oldToken = this.token;\n    this.activeRefresh = (async() => {\n\n      let newToken: OAuth2Token|null = null;\n\n      try {\n        if (oldToken?.refreshToken) {\n          // We had a refresh token, lets see if we can use it!\n          newToken = await this.options.client.refreshToken(oldToken);\n        }\n      } catch (err) {\n        console.warn('[oauth2] refresh token not accepted, we\\'ll try reauthenticating');\n      }\n\n      if (!newToken) {\n        newToken = await this.options.getNewToken();\n      }\n\n      if (!newToken) {\n        const err = new Error('Unableto obtain OAuth2 tokens, a full reauth may be needed');\n        this.options.onError?.(err);\n        throw err;\n      }\n      return newToken;\n\n    })();\n\n    try {\n      const token = await this.activeRefresh;\n      this.token = token;\n      this.options.storeToken?.(token);\n      this.scheduleRefresh();\n      return token;\n    } catch (err: any) {\n      if (this.options.onError) {\n        this.options.onError(err);\n      }\n      throw err;\n    } finally {\n      // Make sure we clear the current refresh operation.\n      this.activeRefresh = null;\n    }\n\n  }\n\n  /**\n   * Timer trigger for the next automated refresh\n   */\n  private refreshTimer: ReturnType<typeof setTimeout> | null = null;\n\n  private scheduleRefresh() {\n\n    if (this.refreshTimer) {\n      clearTimeout(this.refreshTimer);\n      this.refreshTimer = null;\n    }\n\n    if (!this.token?.expiresAt || !this.token.refreshToken) {\n      // If we don't know when the token expires, or don't have a refresh_token, don't bother.\n      return;\n    }\n\n    const expiresIn = this.token.expiresAt - Date.now();\n\n    // We only schedule this event if it happens more than 2 minutes in the future.\n    if (expiresIn < 120*1000) {\n      return;\n    }\n\n    // Schedule 1 minute before expiry\n    this.refreshTimer = setTimeout(async () => {\n      try {\n        await this.refreshToken();\n      } catch (err) {\n        // eslint-disable-next-line no-console\n        console.error('[fetch-mw-oauth2] error while doing a background OAuth2 auto-refresh', err);\n      }\n    }, expiresIn - 60*1000);\n\n  }\n\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","export { OAuth2Client } from './client';\nexport { OAuth2AuthorizationCodeClient, generateCodeVerifier } from './client/authorization-code';\nexport { OAuth2Fetch } from './fetch-wrapper';\nexport { OAuth2Token } from './token';\nexport { OAuth2Error } from './error';\n\nexport { IntrospectionResponse } from './messages';\n"],"names":["root","factory","exports","module","define","amd","self","resolve","uri","base","URL","toString","tokenResponseToOAuth2Token","resp","then","body","accessToken","access_token","expiresAt","expires_in","Date","now","refreshToken","refresh_token","generateQueryString","params","URLSearchParams","Object","fromEntries","entries","filter","k","v","undefined","constructor","clientSettings","discoveryDone","serverMetadata","this","settings","async","token","Error","grant_type","clientSecret","client_id","clientId","request","scope","join","authorizationCode","OAuth2AuthorizationCodeClient","token_type_hint","endpoint","server","discover","discoverUrl","getEndpoint","err","console","warn","fetch","headers","Accept","ok","get","startsWith","json","urlMap","property","setting","basicAuthStr","btoa","Authorization","method","jsonError","errorMessage","oauth2Code","has","error","error_description","status","statusText","OAuth2Error","getCodeChallenge","codeVerifier","webCrypto","getWebCrypto","subtle","base64Url","digest","stringToBuffer","hash","createHash","update","window","crypto","webcrypto","input","buf","Uint8Array","length","i","charCodeAt","String","fromCharCode","replace","client","codeChallenge","authorizationEndpoint","Promise","all","query","response_type","redirect_uri","redirectUri","code_challenge_method","code_challenge","state","url","code","validateResponse","getToken","queryParams","searchParams","split","code_verifier","arr","getRandomValues","nodeCrypto","res","rej","randomBytes","message","httpCode","super","options","activeRefresh","refreshTimer","getStoredToken","scheduleRefresh","init","Request","mw","req","next","getAccessToken","authenticatedRequest","clone","set","response","newToken","oldToken","getNewToken","onError","storeToken","clearTimeout","expiresIn","setTimeout","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","OAuth2Client","generateCodeVerifier","OAuth2Fetch"],"sourceRoot":""}